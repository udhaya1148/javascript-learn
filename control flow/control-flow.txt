Java Script Conditional Statement and Loops 

Conditional statements include: 

if 

if...else 

if...else if...else 

switch 

ternary (? :) 

When to use Conditionals 

Use if to specify a code block to be executed, if a specified condition is true 

Use else to specify a code block to be executed, if the same condition is false 

Use else if to specify a new condition to test, if the first condition is false 

Use switch to specify many alternative code blocks to be executed 

Use (? :) (ternary) as a shorthand for if...else 

 

The if Statement 

Use if to specify a code block to be executed, if a specified condition is true. 

Syntax 

if (condition) { 
  // code to execute if the condition is true 
} 

 

 

The else Statement 

Use else to specify a code block to be executed, if the same condition is false. 

Syntax 

if (condition) { 
  // code to execute if the condition is true 
} else { 
  // code to execute if the condition is false 
} 

 

The else if Statement 

Use else if to specify a new condition to test, if the first condition is false. 

Syntax 

if (condition1) { 
  // code to execute if condition1 is true 
} else if (condition2) { 
  // code to execute if the condition1 is false and condition2 is true 
} else { 
  // code to execute if the condition1 is false and condition2 is false 
} 

 

The switch Statement 

Use switch to specify many alternative code blocks to be executed. 

Syntax 

switch(expression) { 
  case x: 
    // code block 
    break; 
  case y: 
    // code block 
    break; 
  default: 
    // code block 
} 

 

Ternary Operator (? :) 

Use (? :) (ternary) as a shorthand for if...else. 

Example 

condition ? expression1 : expression2 

 

Nested if 

You can use an if statement inside another if statement: 

Example 

let age = 16; 
let country = "USA"; 
let text = "You can Not drive!"; 
 
if (country == "USA") { 
  if (age >= 16) { 
    text = "You can drive!"; 
  } 
} 
 

 

Nested if statements can make your code more complex. 

A better solution is to use the logical AND operator: 

Example 

let age = 16; 
let country = "USA"; 
let text = "You can Not drive!"; 
 
if (country == "USA" && age >= 16) { 
  text = "You can drive!"; 
} 

 

Logical Operators 

Logical operators are used to combine boolean expressions. 

Logical operators can be used to modify the results of comparisons. 

Typically, you will use a comparison operator to check a condition, and a logical operator to combine conditions into more complex logic. 

JavaScript Logical Operators 

Logical operators are used to determine the logic between variables or values. 

Given that x = 6 and y = 3, the table below explains the logical operators: 

Oper 

Name 

Example 

 

&& 

AND 

(x < 10 && y > 1) is true 

 

|| 

OR 

(x === 5 || y === 5) is false 

 

! 

NOT 

!(x === y) is true 

 

 

JavaScript Loops 

Loops are handy, if you want to run the same code over and over again, each time with a different value. 

 

The For Loop 

The for statement creates a loop with 3 optional expressions: 

for (expr1; expr2; expr) { 
  // code block to be executed 
} 

 

for(initializer; condition; increment/decrement){ 

  block of code 

} 
 

exp1 is executed one time before the execution of the code block. 

exp2 defines the condition for executing the code block. 

exp3 is executed every time the code block has been executed. 

 

Example 

text = '' 

for (let i = 0; i < 5; i++) { 

text += "The number is " + i + "\n"; 

} 

console.log(text) 

Output: 

The number is 0 
The number is 1 
The number is 2 
The number is 3 
The number is 4 

 

 

The While Loop 

The while loop loops through a block of code as long as a specified condition is true. 

Syntax 

while (condition) { 
  // code block to be executed 
} 

 

 

 

Example 

In the following example, the code in the loop will run, over and over again, as long as a variable (i) is less than 10: 

Example 

text='' 

i=1 

while (i < 10) { 

  text += "The number is " + i+'\n'; 

  i++; 

} 

console.log(text) 

 

Output: 

The number is 1 
The number is 2 
The number is 3 
The number is 4 
The number is 5 
The number is 6 
The number is 7 
The number is 8 
The number is 9 
 

 

JavaScript Break 

 

The Break Statement 

 

The break statement "jumps out" of loops and switches. 

The break statement terminates the execution of a loop or a switch statement. 

 

Break in Loops:  

When break is encountered in a loop, the loop terminates immediately. 

The program control is transfered to the statements following the loop. 

No more loop iterations are executed. 

 

Example without break : 

text='' 

for (let i = 0; i < 10; i++) { 

  text += "The number is " + i + "\n"; 

} 

console.log(text) 

 

Output: 

The number is 0 
The number is 1 
The number is 2 
The number is 3 
The number is 4 
The number is 5 
The number is 6 
The number is 7 
The number is 8 
The number is 9 
 

 

Example with break: 

text='' 

for (let i = 0; i < 10; i++) { 

  if (i === 3) { break; } 

  text += "The number is " + i + "\n"; 

} 

console.log(text) 

 

Output: 

The number is 0 
The number is 1 
The number is 2   // it stop from 3d iterations 

 

 

 

 

Do while loop:  

Example: 

odd=[] 

even=[] 

i=1  

do{ 

  if(i % 2 == 0){ 

    even.push(i) 

  } 

  else{ 

    odd.push(i) 

  } 

  i++ 

}while(i<=100) 

console.log(even) 

console.log(odd) 

 

Output: 

[ 
   2,  4,  6,  8, 10,  12, 14, 16, 18, 20, 22, 
  24, 26, 28, 30, 32,  34, 36, 38, 40, 42, 44, 
  46, 48, 50, 52, 54,  56, 58, 60, 62, 64, 66, 
  68, 70, 72, 74, 76,  78, 80, 82, 84, 86, 88, 
  90, 92, 94, 96, 98, 100 
] 
[ 
   1,  3,  5,  7,  9, 11, 13, 15, 17, 19, 21, 
  23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 
  45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 
  67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 
  89, 91, 93, 95, 97, 99 
] 

 
 

 

JavaScript Continue 

The Continue Statement 

The continue statement skips the current iteration in a loop. 

The remaining code in the iteration is skipped and processing moves to the next iteration. 

Example without continue : 

text='' 

for (let i = 0; i < 10; i++) { 

  text += "The number is " + i + "\n"; 

} 

console.log(text) 

 

Output: 

The number is 0 
The number is 1 
The number is 2 
The number is 3 
The number is 4 
The number is 5 
The number is 6 
The number is 7 
The number is 8 
The number is 9 
 

Example with continue: 

text='' 

for (let i = 0; i < 10; i++) { 

  if (i === 3) { continue; } 

  text += "The number is " + i + "\n"; 

} 

console.log(text) 

 

Output: 

The number is 0 
The number is 1 
The number is 2 
The number is 4 
The number is 5 
The number is 6 
The number is 7 
The number is 8 
The number is 9 
 

It skips 3rd iterations 
