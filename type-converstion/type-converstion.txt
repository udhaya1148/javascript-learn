Type Conversion 

1. What is Type Conversion? 

Type conversion means changing a value from one type to another: 

String â†’ "hello", "123" 

Number â†’ 123, 4.5 

Boolean â†’ true, false 

There are two types of conversion: explicit and implicit. 

 

ðŸ”¹ 2. Explicit Conversion (Type Casting) 

This is when you manually convert a value using functions like String(), Number(), or Boolean(). 

Examples: 

// Number â†’ String 
let num = 123; 
let str = String(num); 
console.log(str);        // "123" 
console.log(typeof str); // "string" 
 
// String â†’ Number 
let str2 = "456"; 
let num2 = Number(str2); 
console.log(num2);       // 456 
console.log(typeof num2);// "number" 
 
// Any value â†’ Boolean 
console.log(Boolean(0));     // false 
console.log(Boolean(123));   // true 
console.log(Boolean(""));    // false 
console.log(Boolean("hello"));// true 
 

âœ… Explicit conversion is always intentional and clear. 

 

ðŸ”¹ 3. Implicit Conversion (Type Coercion) 

Rules: 

+ operator â†’ if any operand is string â†’ converts the other to string. Because string have 2 purpose (addition and concatenation . So java script decide based on operator 

-, *, /, % â†’ converts operands to numbers. It convert forcely string to number because these operators only for arithmetic operations.Arithmetic operation only done between numbers.so javascript convert string to number 

Boolean context (if, while) â†’ converts value to true/false. 

== comparison â†’ converts types to match before comparison. 

 

This happens automatically when JavaScript mixes different types. 

Examples: 

// Number + String â†’ String 
console.log(5 + "5"); // "55" (number converted to string) 
 
// Boolean â†’ Number in arithmetic 
console.log(true + 1);  // 2 (true â†’ 1) 
console.log(false + 1); // 1 (false â†’ 0) 
 
// String â†’ Number in arithmetic 
console.log("10" - 5); // 5 ("10" converted to number) 
console.log("10" * 2); // 20 

1. String Coercion 

When JS expects a string (like + with a string), it converts other types to strings. 

console.log("5" + 2);      // "52" â†’ number 2 becomes string 
console.log(true + " test");// "true test" â†’ boolean becomes string 
console.log(null + " ok");  // "null ok" â†’ null becomes string 
console.log(undefined + " hi"); // "undefined hi" 
 

Rule: + with any string â†’ converts other operand to string. 

 

ðŸ”¹ 2. Number Coercion 

When JS expects a number (like -, *, /, %), it converts values to numbers. 

console.log("10" - 5);   // 5 â†’ string "10" becomes number 
console.log("10" * 2);   // 20 
console.log("10" / "2"); // 5 
console.log(true + 1);   // 2 â†’ true = 1 
console.log(false + 5);  // 5 â†’ false = 0 
console.log(null + 5);   // 5 â†’ null = 0 
console.log(undefined + 5); // NaN â†’ undefined cannot convert to number 
 

Rule: -, *, /, % â†’ JS converts operands to numbers. 

 

ðŸ”¹ 3. Boolean Coercion 

When JS expects a boolean (in if, while, ? :), it converts value to true or false. 

if ("hello") console.log("true"); // prints "true" â†’ non-empty string = true 
if ("") console.log("false");     // doesn't print â†’ empty string = false 
if (0) console.log("false");      // doesn't print â†’ 0 = false 
if (123) console.log("true");     // prints "true" â†’ non-zero number = true 
if (null) console.log("false");   // doesn't print â†’ null = false 
if (undefined) console.log("false"); // doesn't print â†’ undefined = false 
 

 

ðŸ”¹ 4. Comparison Coercion 

console.log("5" == 5);      // true â†’ string "5" converted to number 
console.log("0" == false);  // true â†’ string "0" â†’ number 0 â†’ equals false 
console.log(1 == true);     // true â†’ true = 1 
console.log(0 == false);    // true 
console.log(null == undefined); // true â†’ special case 
 

Note: Always use === (strict equality) to avoid implicit coercion issues. 

 