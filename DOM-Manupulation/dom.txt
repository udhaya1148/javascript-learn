DOM Manipulation 

The HTML DOM (Document Object Model) 

When a web page is loaded, the browser creates a Document Object Model of the page. 

DOM (Document Object Model) = the way the browser represents your HTML as a tree of objects so JavaScript can interact with it. 

The HTML DOM is a standard for how to get, change, add, or delete HTML elements. 

The HTML DOM model is constructed as a tree of Objects: 

 

 

With the object model, JavaScript gets all the power it needs to create dynamic HTML: 

JavaScript can change all the HTML elements in the page 

JavaScript can change all the HTML attributes in the page 

JavaScript can change all the CSS styles in the page 

JavaScript can remove existing HTML elements and attributes 

JavaScript can add new HTML elements and attributes 

JavaScript can react to all existing HTML events in the page 

JavaScript can create new HTML events in the page 

 

 

DOM tree basics 

Think of your HTML page as a tree: 

<div id="parent"> 
  <p id="child">Hello!</p> 
</div> 
 

<div> is the parent node. 

<p> is the child node of the <div>. 

The terms “parent” and “child” just describe the relationship in the DOM tree: 

Parent = the element that contains other elements. 

Child = the element contained inside a parent. 

 

 

HTML DOM Methods 

 

HTML DOM methods are actions you can perform (on HTML Elements). 

HTML DOM properties are values (of HTML Elements) that you can set or change. 

 

The innerHTML Property 

The easiest way to get the content of an element is by using the innerHTML property. 

The innerHTML property is useful for getting or replacing the content of HTML elements. 

 

Finding HTML Elements 

Method 

Description 

document.getElementById(id) 

Find an element by element id 

document.getElementsByTagName(name) 

Find elements by tag name 

document.getElementsByClassName(name) 

 

Find elements by class name 

 

Changing HTML Elements 

Property 

Description 

element.innerHTML =  new html content 

Change the inner HTML of an element 

element.attribute = new value 

Change the attribute value of an HTML element 

element.style.property = new style 

Change the style of an HTML element 

Method 

Description 

element.setAttribute(attribute, value) 

Change the attribute value of an HTML element 

 

Adding and Deleting Elements 

Method 

Description 

document.createElement(element) 

Create an HTML element 

document.removeChild(element) 

Remove an HTML element 

document.appendChild(element) 

Add an HTML element 

 

Finding HTML Elements by CSS Selectors 

If you want to find all HTML elements that match a specified CSS selector (id, class names, types, attributes, values of attributes, etc), use the querySelectorAll() method. 
 

Changing the Value of an Attribute 

To change the value of an HTML attribute 

syntax: 

document.getElementById(id).attribute = new value 

 

Example 

<!DOCTYPE html> 
<html> 
<body> 
 
<img id="myImage" src="smiley.gif"> 
 
<script> 
document.getElementById("myImage").src = "landscape.jpg"; 
</script> 
 
</body> 
</html> 

The HTML document above contains an <img> element with id="myImage" 

We use the HTML DOM to get the element with id="myImage" 

A JavaScript changes the src attribute of that element from "smiley.gif" to "landscape.jpg" 

 

Create / remove elements 

.remove() works for any element currently in the DOM — 
 whether it was: 

already existing in HTML, or 

created dynamically using JavaScript (createElement). 

 

Make new elements and place them into the DOM. 

<p id="text">Hello!</p> 

<button id="btn">Remove Paragraph</button> 

  

<script> 

  const para = document.getElementById('text'); 

  const btn = document.getElementById('btn'); 

  

  btn.addEventListener('click', () => { 

    para.remove(); // removes existing <p> from DOM 

  }); 

</script> 

 

 

 